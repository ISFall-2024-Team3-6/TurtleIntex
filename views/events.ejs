<!DOCTYPE html>
<html>
  <%
  // Define the function at the top of your EJS file
  function capitalize(str) {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  }
%>
<head>
  <title>Events</title> 
 
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="/style/styles.css">
 
  <style>
    /* Style the sticky column */
    .sticky-column {
      position: sticky;
      left: 0;
      background: #f4f4f4; /* Optional: background color */
      z-index: 2; /* Ensure it appears above the scrolling content */
      box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1); /* Optional: shadow for better visibility */
    }
    table {
      width: 80%;
      margin: 20px auto;
      border-collapse: collapse;
      font-size: 10px; /* Reduce the font size of the table */
    }

    /* Sticky column styles */
    th, td:first-child {
      position: sticky;
      left: 0;
      z-index: 1;
      background: #f4f4f4; /* Match the table's header background */
    }
    thead th {
      z-index: 2; /* Ensure header stays above other cells */
    }
    th {
      background-color: #F2F2F2;
      font-weight: bold;
    }
    button {
      padding: 4px 8px; /* Adjust button size */
      margin: 2px;
      font-size: 12px; /* Adjust button font size */
      cursor: pointer;
    }
    tbody tr:nth-child(even) {
      background: #f9f9f9;
    }
  </style>
  

</head>
<body>
  <!-- Navigation bar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="/adminIndex">Admin Console</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
        <form action="/logout" method="GET" class="d-inline ms-auto">
          <button type="submit" class="btn button-color mb-2">Logout</button>
        </form>
      </div>
    </div>
  </nav>
</head>


  <h1 style="text-align: center;">Upcoming Events</h1>
  <table>
    <thead>
      <tr>
        <th>Actions</th>
        <th>Contact First Name</th>
        <th>Contact Last Name</th>
        <th>Contact Phone</th>
        <th>Contact Email</th>
        <th>Contact Preferred</th>
        <th>Event Type</th>
        <th>Event Date</th>
        <th>Event Backup Date</th>
        <th>Event Backup Date 2</th>
        <th>Event Start Time</th>
        <th>Event Expected Duration</th>
        <th>Event Address</th>
        <th>Event City</th>
        <th>Event State</th>
        <th>Event Zipcode</th>
        <th>Event Space Capacity</th>
        <th>Table Type</th>
        <th>Number of Sewers</th>
        <th>Expected Adults</th>
        <th>Expected Children</th>
        <th>Do you want to hear Jen's story?</th>
      </tr>
    </thead>
    <tbody>
      <% if (upcomingEvents && upcomingEvents.length > 0) { %>
        <% upcomingEvents.forEach(row => { %>
          <tr>
            <td>
              <form action="/editUpcomingEvents/<%= row.eventid%>" method="GET" style="display:inline;">
                <button type="submit">Edit</button>
              </form>
              <form action="/deleteUpcomingEvents/<%= row.eventid%>" method="POST" style="display: inline;">
                <button type="submit" onclick="return confirm('Are you sure you want to delete this record?');">Remove</button>
              </form>
            </td>
            <td><%= capitalize(row.contact_first_name) %></td>
            <td><%= capitalize(row.contact_last_name) %></td>
            <td><%= row.contact_phone %></td>
            <td><%= row.contact_email %></td>
            <td><%= capitalize(row.contact_preferred_contact) %></td>
            <td>
              <%= row.event_type === 'NS' ? 'Non-sewing' : row.event_type === 'S' ? 'Sewing' : row.event_type === 'B' ? 'Both' : '' %>
            </td>
            
            <!-- <td><%= row.event_date ? row.event_date.toISOString().split('T')[0] : '' %></td> -->

            <td>
              <% if (row.event_date) { 
                let date = new Date(row.event_date);
                let formattedDate = `${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}-${date.getFullYear()}`;
                %>
                <%= formattedDate %>
              <% } else { %>
                <%= '' %>
              <% } %>
            </td>


            <td><%= row.event_backup_date ? row.event_backup_date.toISOString().split('T')[0] : '' %></td>
            <td><%= row.event_backup_date_2 ? row.event_backup_date_2.toISOString().split('T')[0] : '' %></td>
            <td><%= row.event_start_time %></td>
            <td><%= row.event_expected_duration %></td>
            <td><%= row.event_address %></td>
            <td><%= capitalize(row.event_city) %></td>
            <td><%= capitalize(row.event_state) %></td>
            <td><%= row.event_zip %></td>
            <td><%= row.event_space_capacity %></td>
            <td><%= capitalize(row.table_types) %></td>
            <td><%= row.number_sewers %></td>
            <td><%= row.event_expected_adults %></td>
            <td><%= row.event_expected_children %></td>
            <td><%= row.jen_story ? "Yes" : "No" %></td>

          </tr>
          <% }) %>
          <% } else { %>
            <tr><td colspan="36">No upcoming events found</td></tr>
          <% } %>
        </tr>
    </tbody>
  </table>

  <h1 style="text-align: center;">Past Events</h1>
  <div style="overflow-x: auto; position: relative; max-width: 86vw; margin: 0 auto; border: 1px solid #ccc;">
    <table id="pastEventsTable" style="border-collapse: collapse; width: 100%; table-layout: auto;">
      <thead>
        <tr>
          <th style="position: sticky; left: 0; z-index: 3; background: #f4f4f4;">Actions</th>
          <th>Contact Email</th>
          <th>Event Type</th>
          <th>Event Date</th>
          <th>Event Start Time</th>
          <th>Event Actual Duration</th>
          <th>Event Address</th>
          <th>Event City</th>
          <th>Event State</th>
          <th>Event Zipcode</th>
          <th>Event Space Capacity</th>
          <th>Number of Sewers</th>
          <th>Actual Adults</th>
          <th>Actual Children</th>
          <th>Pockets Brought</th>
          <th>Pockets In Progress</th>
          <th>Pockets Finished</th>
          <th>Collars Brought</th>
          <th>Collars In Progress</th>
          <th>Collars Finished</th>
          <th>Envelopes Brought</th>
          <th>Envelopes In Progress</th>
          <th>Envelopes Finished</th>
          <th>Vests Brought</th>
          <th>Vests In Progress</th>
          <th>Vests Finished</th>
          <th>Completed Products</th>
        </tr>
      </thead>
      <tbody>
        <% if (pastEvents && pastEvents.length > 0) { %>
          <% pastEvents.forEach(row => { %>
            <tr>
              <td style="position: sticky; left: 0; z-index: 2; background: #f9f9f9;">
                <form action="/editEvents/<%= row.eventid %>" method="GET" style="display:inline;">
                  <button type="submit">Edit</button>
                </form>
                <form action="/deleteEvents/<%= row.eventid %>" method="POST" style="display:inline;">
                  <button type="submit" onclick="return confirm('Are you sure you want to delete this record?');">Remove</button>
                </form>
              </td>
              <td><%= row.contact_email %></td>
              <td>
                <%= row.event_type === 'NS' ? 'Non-sewing' : row.event_type === 'S' ? 'Sewing' : row.event_type === 'B' ? 'Both' : '' %>
              </td>
              <td><%= row.event_date ? row.event_date.toISOString().split('T')[0] : '' %></td>
              <td><%= row.event_start_time %></td>
              <td><%= row.event_actual_duration %></td>
              <td><%= row.event_address %></td>
              <td><%= capitalize(row.event_city) %></td>
              <td><%= capitalize(row.event_state) %></td>
              <td><%= row.event_zip %></td>
              <td><%= row.event_space_capacity %></td>
              <td><%= row.number_sewers %></td>
              <td><%= row.event_actual_adults %></td>
              <td><%= row.event_actual_children %></td>
              <td><%= row.pockets_brought %></td>
              <td><%= row.pockets_in_progress %></td>
              <td><%= row.pockets_finished %></td>
              <td><%= row.collars_brought %></td>
              <td><%= row.collars_in_progress %></td>
              <td><%= row.collars_finished %></td>
              <td><%= row.envelopes_brought %></td>
              <td><%= row.envelopes_in_progress %></td>
              <td><%= row.envelopes_finished %></td>
              <td><%= row.vests_brought %></td>
              <td><%= row.vests_in_progress %></td>
              <td><%= row.vests_finished %></td>
              <td><%= row.completed_products %></td>
            </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="27">No past events found</td>
          </tr>
        <% } %>
      </tbody>
    </table>
      <!-- Pagination Controls -->
    <div id="paginationControls" style="text-align: center; margin-top: 10px; margin-bottom: 10px;">
        <!-- Buttons will be dynamically generated -->
    </div>
  </div>
  
  
  <script>
    document.addEventListener('DOMContentLoaded', function () {
    const pastEventsTable = document.getElementById('pastEventsTable'); // Target the past events table
    if (!pastEventsTable) {
      console.error('Past Events table not found!');
      return;
    }

    const tableBody = pastEventsTable.querySelector('tbody'); // Get the table body
    const rows = tableBody.querySelectorAll('tr'); // Get all rows in the body
    const paginationControls = document.getElementById('paginationControls'); // Pagination controls container

    const rowsPerPage = 10; // Number of rows per page
    const totalPages = Math.ceil(rows.length / rowsPerPage); // Calculate total pages
    let currentPage = 1; // Start at the first page

    // Function to display rows for the current page
    function showPage(page) {
      currentPage = page;

      const startIndex = (page - 1) * rowsPerPage;
      const endIndex = startIndex + rowsPerPage;

      // Show only rows for the current page
      rows.forEach((row, index) => {
        row.style.display = index >= startIndex && index < endIndex ? '' : 'none';
      });

      // Update pagination controls
      updatePaginationControls();
    }

    // Function to create and update pagination controls
    function updatePaginationControls() {
      paginationControls.innerHTML = ''; // Clear existing controls

      for (let i = 1; i <= totalPages; i++) {
        const button = document.createElement('button');
        button.textContent = i; // Page number
        button.style.margin = '0 5px';
        button.style.padding = '5px 10px';
        button.style.cursor = 'pointer';
        button.disabled = i === currentPage; // Disable button for the current page

        // Event listener to switch pages
        button.addEventListener('click', () => showPage(i));
        paginationControls.appendChild(button);
      }
    }

    // Initialize pagination
    if (rows.length > 0) {
      showPage(1); // Show the first page by default
    } else {
      paginationControls.textContent = 'No rows to display.'; // Handle empty tables
    }
  });

  </script>

</body>
</html>